import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import os

logger = logging.getLogger(__name__)


class ScheduledForwardManager:
    def __init__(self, bot, sheets_manager):
        self.bot = bot
        self.sheets_manager = sheets_manager
        self.scheduled_data_file = "scheduled_forwards.json"
        self.scheduled_tasks = {}
        self._load_scheduled_data()

    def _load_scheduled_data(self):
        """T·∫£i d·ªØ li·ªáu l·ªãch h·∫πn gi·ªù t·ª´ file"""
        try:
            if os.path.exists(self.scheduled_data_file):
                with open(self.scheduled_data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # X·ª≠ l√Ω format c≈© v·ªõi nested structure
                    if 'scheduled_data' in data:
                        scheduled_data = data['scheduled_data']
                        logger.info(f"ƒê√£ t·∫£i {len(scheduled_data)} l·ªãch h·∫πn gi·ªù")
                        return scheduled_data
                    else:
                        logger.info(f"ƒê√£ t·∫£i {len(data)} l·ªãch h·∫πn gi·ªù")
                        return data
        except Exception as e:
            logger.error(f"L·ªói t·∫£i d·ªØ li·ªáu l·ªãch h·∫πn gi·ªù: {e}")
        return {}

    def _save_scheduled_data(self, data):
        """L∆∞u d·ªØ li·ªáu l·ªãch h·∫πn gi·ªù v√†o file"""
        try:
            # L∆∞u v·ªõi format m·ªõi ƒë∆°n gi·∫£n
            with open(self.scheduled_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"L·ªói l∆∞u d·ªØ li·ªáu l·ªãch h·∫πn gi·ªù: {e}")

    def schedule_forward_message(self, message_data: Dict, schedule_time: datetime,
                                 target_type: str = "channels", target_ids: List[str] = None) -> str:
        """L√™n l·ªãch chuy·ªÉn ti·∫øp tin nh·∫Øn"""
        try:
            # T·∫°o ID duy nh·∫•t cho l·ªãch h·∫πn gi·ªù
            schedule_id = f"schedule_{int(schedule_time.timestamp())}_{len(self.scheduled_tasks) + 1}"

            # T√≠nh to√°n th·ªùi gian ch·ªù
            now = datetime.now()
            delay_seconds = (schedule_time - now).total_seconds()

            if delay_seconds <= 0:
                return "‚ùå Th·ªùi gian h·∫πn gi·ªù ph·∫£i trong t∆∞∆°ng lai!"

            # L∆∞u th√¥ng tin l·ªãch h·∫πn gi·ªù
            schedule_info = {
                "id": schedule_id,
                "message_data": message_data,
                "schedule_time": schedule_time.isoformat(),
                "target_type": target_type,
                "target_ids": target_ids or [],
                "created_at": now.isoformat()
            }

            # L∆∞u v√†o file
            data = self._load_scheduled_data()
            data[schedule_id] = schedule_info
            self._save_scheduled_data(data)

            # T·∫°o task ch·∫°y trong background
            task = asyncio.create_task(self._execute_scheduled_forward(schedule_id, delay_seconds))
            self.scheduled_tasks[schedule_id] = task

            logger.info(f"ƒê√£ l√™n l·ªãch chuy·ªÉn ti·∫øp: {schedule_id} v√†o {schedule_time}")
            return f"‚úÖ ƒê√£ l√™n l·ªãch chuy·ªÉn ti·∫øp tin nh·∫Øn v√†o {schedule_time.strftime('%d/%m/%Y %H:%M')}"

        except Exception as e:
            logger.error(f"L·ªói l√™n l·ªãch chuy·ªÉn ti·∫øp: {e}")
            return f"‚ùå L·ªói l√™n l·ªãch chuy·ªÉn ti·∫øp: {e}"

    async def _execute_scheduled_forward(self, schedule_id: str, delay_seconds: float):
        """Th·ª±c hi·ªán chuy·ªÉn ti·∫øp tin nh·∫Øn theo l·ªãch h·∫πn gi·ªù"""
        try:
            # Ch·ªù ƒë·∫øn th·ªùi gian h·∫πn gi·ªù
            await asyncio.sleep(delay_seconds)

            # T·∫£i l·∫°i d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c
            data = self._load_scheduled_data()
            if schedule_id not in data:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn gi·ªù: {schedule_id}")
                return

            schedule_info = data[schedule_id]
            message_data = schedule_info["message_data"]
            target_type = schedule_info["target_type"]
            target_ids = schedule_info["target_ids"]

            # Th·ª±c hi·ªán chuy·ªÉn ti·∫øp
            await self._perform_forward(message_data, target_type, target_ids)

            # X√≥a l·ªãch h·∫πn gi·ªù ƒë√£ ho√†n th√†nh
            del data[schedule_id]
            self._save_scheduled_data(data)

            # X√≥a task
            if schedule_id in self.scheduled_tasks:
                del self.scheduled_tasks[schedule_id]

            logger.info(f"ƒê√£ ho√†n th√†nh chuy·ªÉn ti·∫øp theo l·ªãch h·∫πn gi·ªù: {schedule_id}")

        except asyncio.CancelledError:
            logger.info(f"Task chuy·ªÉn ti·∫øp b·ªã h·ªßy: {schedule_id}")
        except Exception as e:
            logger.error(f"L·ªói th·ª±c hi·ªán chuy·ªÉn ti·∫øp theo l·ªãch h·∫πn gi·ªù {schedule_id}: {e}")

    async def _perform_forward(self, message_data: Dict, target_type: str, target_ids: List[str]):
        """Th·ª±c hi·ªán chuy·ªÉn ti·∫øp tin nh·∫Øn"""
        try:
            if target_type == "channels":
                await self._forward_to_selected_channels(message_data, target_ids)
            else:
                await self._forward_to_all_customers(message_data)

        except Exception as e:
            logger.error(f"L·ªói th·ª±c hi·ªán chuy·ªÉn ti·∫øp: {e}")

    async def _forward_to_selected_channels(self, message_data: Dict, target_ids: List[str]):
        """Chuy·ªÉn ti·∫øp ƒë·∫øn c√°c k√™nh ƒë∆∞·ª£c ch·ªçn"""
        try:
            # L·∫•y danh s√°ch k√™nh t·ª´ Google Sheets
            channels = self.sheets_manager.get_all_channels()

            if not channels:
                logger.warning("Kh√¥ng t√¨m th·∫•y k√™nh n√†o trong Google Sheets")
                return

            # L·ªçc k√™nh theo target_ids n·∫øu c√≥
            if target_ids:
                channels = [ch for ch in channels if ch.get('id') in target_ids]

            success_count = 0
            error_count = 0

            for channel in channels:
                try:
                    channel_id = channel.get('id')
                    if not channel_id:
                        continue

                    # Chuy·ªÉn ti·∫øp tin nh·∫Øn theo lo·∫°i
                    if message_data.get('type') == 'photo':
                        await self.bot.send_photo(
                            chat_id=channel_id,
                            photo=message_data['photo'],
                            caption=message_data.get('caption', ''),
                            parse_mode='HTML'
                        )
                    elif message_data.get('type') == 'video':
                        await self.bot.send_video(
                            chat_id=channel_id,
                            video=message_data['video'],
                            caption=message_data.get('caption', ''),
                            parse_mode='HTML'
                        )
                    elif message_data.get('type') == 'document':
                        await self.bot.send_document(
                            chat_id=channel_id,
                            document=message_data['document'],
                            caption=message_data.get('caption', ''),
                            parse_mode='HTML'
                        )
                    else:
                        # Tin nh·∫Øn vƒÉn b·∫£n
                        await self.bot.forward_message(
                            chat_id=channel_id,
                            from_chat_id=message_data['from_chat_id'],
                            message_id=message_data['message_id']
                        )

                    success_count += 1
                    logger.info(f"ƒê√£ chuy·ªÉn ti·∫øp ƒë·∫øn k√™nh {channel_id}")

                except Exception as e:
                    error_count += 1
                    logger.error(f"L·ªói chuy·ªÉn ti·∫øp ƒë·∫øn k√™nh {channel.get('id', 'unknown')}: {e}")

            # Th√¥ng b√°o k·∫øt qu·∫£ cho admin
            await self._notify_admin_result(success_count, error_count, len(channels))

        except Exception as e:
            logger.error(f"L·ªói chuy·ªÉn ti·∫øp ƒë·∫øn k√™nh: {e}")

    async def _forward_to_all_customers(self, message_data: Dict):
        """Chuy·ªÉn ti·∫øp ƒë·∫øn t·∫•t c·∫£ kh√°ch h√†ng"""
        try:
            customers = self.sheets_manager.get_all_customers()
            success_count = 0
            error_count = 0

            for customer in customers:
                try:
                    customer_id = customer.get('telegram_id')
                    if not customer_id:
                        continue

                    await self.bot.forward_message(
                        chat_id=customer_id,
                        from_chat_id=message_data['from_chat_id'],
                        message_id=message_data['message_id']
                    )

                    success_count += 1

                except Exception as e:
                    error_count += 1
                    logger.error(f"L·ªói chuy·ªÉn ti·∫øp ƒë·∫øn kh√°ch h√†ng {customer.get('telegram_id', 'unknown')}: {e}")

            # Th√¥ng b√°o k·∫øt qu·∫£ cho admin
            await self._notify_admin_result(success_count, error_count, len(customers))

        except Exception as e:
            logger.error(f"L·ªói chuy·ªÉn ti·∫øp ƒë·∫øn kh√°ch h√†ng: {e}")

    async def _notify_admin_result(self, success_count: int, error_count: int, total_count: int):
        """Th√¥ng b√°o k·∫øt qu·∫£ chuy·ªÉn ti·∫øp cho admin"""
        try:
            from bot_config import ADMIN_USER_IDS

            result_message = "üìä K·∫øt qu·∫£ chuy·ªÉn ti·∫øp tin nh·∫Øn:\n"
            result_message += f"‚úÖ Th√†nh c√¥ng: {success_count}\n"
            result_message += f"‚ùå L·ªói: {error_count}\n"
            result_message += f"üìà T·ªïng s·ªë: {total_count}"

            for admin_id in ADMIN_USER_IDS:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=result_message
                    )
                except Exception as e:
                    logger.error(f"L·ªói g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ cho admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"L·ªói th√¥ng b√°o k·∫øt qu·∫£: {e}")

    def get_scheduled_forwards(self) -> List[Dict]:
        """L·∫•y danh s√°ch l·ªãch h·∫πn gi·ªù chuy·ªÉn ti·∫øp"""
        try:
            data = self._load_scheduled_data()
            forwards = []

            for schedule_id, info in data.items():
                schedule_time = datetime.fromisoformat(info['schedule_time'])
                forwards.append({
                    'id': schedule_id,
                    'schedule_time': schedule_time,
                    'target_type': info['target_type'],
                    'target_ids': info['target_ids'],
                    'created_at': datetime.fromisoformat(info['created_at'])
                })

            # S·∫Øp x·∫øp theo th·ªùi gian h·∫πn gi·ªù
            forwards.sort(key=lambda x: x['schedule_time'])
            return forwards

        except Exception as e:
            logger.error(f"L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn gi·ªù: {e}")
            return []

    def cancel_scheduled_forward(self, schedule_id: str) -> bool:
        """H·ªßy l·ªãch h·∫πn gi·ªù chuy·ªÉn ti·∫øp"""
        try:
            # H·ªßy task n·∫øu ƒëang ch·∫°y
            if schedule_id in self.scheduled_tasks:
                self.scheduled_tasks[schedule_id].cancel()
                del self.scheduled_tasks[schedule_id]

            # X√≥a kh·ªèi file
            data = self._load_scheduled_data()
            if schedule_id in data:
                del data[schedule_id]
                self._save_scheduled_data(data)
                logger.info(f"ƒê√£ h·ªßy l·ªãch h·∫πn gi·ªù: {schedule_id}")
                return True

            return False

        except Exception as e:
            logger.error(f"L·ªói h·ªßy l·ªãch h·∫πn gi·ªù {schedule_id}: {e}")
            return False

    def get_schedule_stats(self) -> Dict[str, int]:
        """L·∫•y th·ªëng k√™ l·ªãch h·∫πn gi·ªù"""
        try:
            data = self._load_scheduled_data()
            now = datetime.now()

            stats = {
                'total': len(data),
                'pending': 0,
                'today': 0,
                'tomorrow': 0
            }

            for schedule_id, info in data.items():
                schedule_time = datetime.fromisoformat(info['schedule_time'])

                if schedule_time > now:
                    stats['pending'] += 1

                if schedule_time.date() == now.date():
                    stats['today'] += 1
                elif schedule_time.date() == (now + timedelta(days=1)).date():
                    stats['tomorrow'] += 1

            return stats

        except Exception as e:
            logger.error(f"L·ªói l·∫•y th·ªëng k√™ l·ªãch h·∫πn gi·ªù: {e}")
            return {'total': 0, 'pending': 0, 'today': 0, 'tomorrow': 0}

    def cleanup_old_schedules(self):
        """D·ªçn d·∫πp c√°c l·ªãch h·∫πn gi·ªù c≈©"""
        try:
            data = self._load_scheduled_data()
            now = datetime.now()
            cleaned_count = 0

            # X√≥a c√°c l·ªãch h·∫πn gi·ªù ƒë√£ qua qu√° 7 ng√†y
            cutoff_time = now - timedelta(days=7)

            for schedule_id, info in list(data.items()):
                schedule_time = datetime.fromisoformat(info['schedule_time'])
                if schedule_time < cutoff_time:
                    del data[schedule_id]
                    cleaned_count += 1

            if cleaned_count > 0:
                self._save_scheduled_data(data)
                logger.info(f"ƒê√£ d·ªçn d·∫πp {cleaned_count} l·ªãch h·∫πn gi·ªù c≈©")

        except Exception as e:
            logger.error(f"L·ªói d·ªçn d·∫πp l·ªãch h·∫πn gi·ªù c≈©: {e}")

    async def restart_scheduled_tasks(self):
        """Kh·ªüi ƒë·ªông l·∫°i c√°c task h·∫πn gi·ªù sau khi restart bot"""
        try:
            logger.info("‚è∞ Kh·ªüi ƒë·ªông l·∫°i c√°c task h·∫πn gi·ªù chuy·ªÉn ti·∫øp...")
            data = self._load_scheduled_data()
            now = datetime.now()
            restarted_count = 0

            for schedule_id, info in data.items():
                try:
                    # X·ª≠ l√Ω format c≈© v√† m·ªõi
                    if 'schedule_time' in info:
                        schedule_time = datetime.fromisoformat(info['schedule_time'])
                    else:
                        logger.warning(f"Kh√¥ng t√¨m th·∫•y schedule_time trong {schedule_id}")
                        continue

                    # Ch·ªâ kh·ªüi ƒë·ªông l·∫°i c√°c task ch∆∞a ƒë·∫øn th·ªùi gian v√† c√≥ status scheduled
                    if schedule_time > now and info.get('status') == 'scheduled':
                        delay_seconds = (schedule_time - now).total_seconds()

                        # T·∫°o l·∫°i task
                        task = asyncio.create_task(self._execute_scheduled_forward(schedule_id, delay_seconds))
                        self.scheduled_tasks[schedule_id] = task

                        logger.info(f"Kh·ªüi ƒë·ªông l·∫°i task h·∫πn gi·ªù: {schedule_id} v√†o {schedule_time}")
                        restarted_count += 1
                    else:
                        logger.info(f"B·ªè qua task {schedule_id}: th·ªùi gian ƒë√£ qua ho·∫∑c status kh√¥ng ph·∫£i scheduled")

                except Exception as e:
                    logger.error(f"L·ªói x·ª≠ l√Ω task {schedule_id}: {e}")

            logger.info(f"ƒê√£ kh·ªüi ƒë·ªông l·∫°i {restarted_count} task h·∫πn gi·ªù")

        except Exception as e:
            logger.error(f"L·ªói kh·ªüi ƒë·ªông l·∫°i task h·∫πn gi·ªù: {e}")