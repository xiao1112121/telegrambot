import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any
from telegram import Bot
import bot_config

logger = logging.getLogger(__name__)


class NotificationManager:
    """Qu·∫£n l√Ω h·ªá th·ªëng notification th√¥ng minh"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.auto_replies = {}
        self.follow_up_tasks = {}
        self.marketing_campaigns = {}
        self.alert_rules = {}
        self._load_config()

    def _load_config(self):
        """T·∫£i c·∫•u h√¨nh notification"""
        # Auto-reply messages
        self.auto_replies = {
            'offline': {
                'vi': ("ü§ñ C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Hi·ªán t·∫°i ch√∫ng t√¥i ƒëang offline. "
                       "Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 2-4 gi·ªù t·ªõi. "
                       "Trong th·ªùi gian ch·ªù, b·∫°n c√≥ th·ªÉ:\n"
                       "‚Ä¢ ü§ñ H·ªèi AI Assistant\n"
                       "‚Ä¢ üìù ƒêƒÉng k√Ω th√¥ng tin\n"
                       "‚Ä¢ üìû ƒê·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i"),
                'zh': ("ü§ñ ÊÑüË∞¢ÊÇ®ÁöÑËÅîÁ≥ªÔºÅÊàë‰ª¨ÁõÆÂâçÁ¶ªÁ∫ø„ÄÇÊàë‰ª¨Â∞ÜÂú®2-4Â∞èÊó∂ÂÜÖÂõûÂ§ç„ÄÇ"
                       "Âú®Á≠âÂæÖÊúüÈó¥ÔºåÊÇ®ÂèØ‰ª•Ôºö\n"
                       "‚Ä¢ ü§ñ ËØ¢ÈóÆAIÂä©Êâã\n"
                       "‚Ä¢ üìù Ê≥®ÂÜå‰ø°ÊÅØ\n"
                       "‚Ä¢ üìû Áïô‰∏ãÁîµËØùÂè∑Á†Å")
            },
            'busy': {
                'vi': ("‚è∞ Hi·ªán t·∫°i ch√∫ng t√¥i ƒëang b·∫≠n r·ªôn. "
                       "Vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn, ch√∫ng t√¥i s·∫Ω li√™n h·ªá s·ªõm nh·∫•t!"),
                'zh': "‚è∞ Êàë‰ª¨ÁõÆÂâçÂæàÂøô„ÄÇËØ∑ÁïôË®ÄÔºåÊàë‰ª¨‰ºöÂ∞ΩÂø´ËÅîÁ≥ªÔºÅ"
            },
            'welcome_back': {
                'vi': "üëã Ch√†o m·ª´ng b·∫°n quay l·∫°i! C√≥ g√¨ m·ªõi kh√¥ng?",
                'zh': "üëã Ê¨¢ËøéÂõûÊù•ÔºÅÊúâ‰ªÄ‰πàÊñ∞Ê∂àÊÅØÂêóÔºü"
            }
        }

        # Follow-up rules
        self.follow_up_rules = {
            'incomplete_registration': {
                'delay_hours': 24,
                'message': {
                    'vi': ("üìù B·∫°n ch∆∞a ho√†n th√†nh ƒëƒÉng k√Ω. "
                           "Vui l√≤ng ho√†n th√†nh ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát!"),
                    'zh': ("üìù ÊÇ®Â∞öÊú™ÂÆåÊàêÊ≥®ÂÜå„ÄÇËØ∑ÂÆåÊàêÊ≥®ÂÜå‰ª•Ëé∑ÂæóÁâπÂà´‰ºòÊÉ†ÔºÅ")
                }
            },
            'no_response': {
                'delay_hours': 48,
                'message': {
                    'vi': ("üí° B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√°c kh√¥ng? "
                           "Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£!"),
                    'zh': "üí° ÊÇ®ËøòÊúâÂÖ∂‰ªñÈóÆÈ¢òÂêóÔºüÊàë‰ª¨ÈöèÊó∂ÂáÜÂ§áÂ∏ÆÂä©ÔºÅ"
                }
            }
        }

        # Marketing templates
        self.marketing_templates = {
            'new_product': {
                'vi': ("üéâ S·∫£n ph·∫©m m·ªõi: {product_name}\n"
                       "üí∞ Gi√°: {price}\n"
                       "üìÖ Khuy·∫øn m√£i ƒë·∫øn: {end_date}\n"
                       "üîó Chi ti·∫øt: {link}"),
                'zh': ("üéâ Êñ∞‰∫ßÂìÅÔºö{product_name}\n"
                       "üí∞ ‰ª∑Ê†ºÔºö{price}\n"
                       "üìÖ ‰øÉÈîÄÊà™Ê≠¢Ôºö{end_date}\n"
                       "üîó ËØ¶ÊÉÖÔºö{link}")
            },
            'promotion': {
                'vi': ("üî• Khuy·∫øn m√£i ƒë·∫∑c bi·ªát!\n"
                       "üíé Gi·∫£m {discount}% cho kh√°ch h√†ng VIP\n"
                       "‚è∞ Ch·ªâ c√≤n {time_left}\n"
                       "üéØ √Åp d·ª•ng cho: {products}"),
                'zh': ("üî• ÁâπÂà´‰øÉÈîÄÔºÅ\n"
                       "üíé VIPÂÆ¢Êà∑‰∫´Âèó{discount}%ÊäòÊâ£\n"
                       "‚è∞ ‰ªÖÂâ©{time_left}\n"
                       "üéØ ÈÄÇÁî®‰∫éÔºö{products}")
            }
        }

        # Alert rules
        self.alert_rules = {
            'vip_customer': {
                'condition': lambda customer: customer.get('company', '').lower() in [
                    'vip', 'enterprise', 'corporate'
                ],
                'message': {
                    'pt': "‚≠ê Cliente VIP entrou em contato: {name} - {company}",
                    'vi': "‚≠ê Kh√°ch h√†ng VIP ƒë√£ li√™n h·ªá: {name} - {company}",
                    'zh': "‚≠ê VIPÂÆ¢Êà∑Â∑≤ËÅîÁ≥ªÔºö{name} - {company}"
                }
            },
            'high_value_lead': {
                'condition': lambda customer: len(customer.get('interests', '')) > 50,
                'message': {
                    'pt': "üíé Lead de alto valor: {name} - {interests}",
                    'vi': "üíé Lead ti·ªÅm nƒÉng cao: {name} - {interests}",
                    'zh': "üíé È´ò‰ª∑ÂÄºÊΩúÂú®ÂÆ¢Êà∑Ôºö{name} - {interests}"
                }
            }
        }

    async def send_auto_reply(self, user_id: int, reply_type: str,
                              language: str = 'vi'):
        """G·ª≠i auto-reply"""
        try:
            if reply_type in self.auto_replies:
                message = self.auto_replies[reply_type].get(
                    language, self.auto_replies[reply_type]['vi']
                )
                await self.bot.send_message(chat_id=user_id, text=message)
                logger.info(f"Auto-reply sent to {user_id}: {reply_type}")
        except Exception as e:
            logger.error(f"Error sending auto-reply: {e}")

    async def schedule_follow_up(self, user_id: int, follow_up_type: str,
                                 language: str = 'vi', delay_hours: int = None):
        """L√™n l·ªãch follow-up"""
        try:
            if follow_up_type in self.follow_up_rules:
                rule = self.follow_up_rules[follow_up_type]
                delay = delay_hours or rule['delay_hours']

                # L∆∞u task ƒë·ªÉ th·ª±c hi·ªán sau
                task = asyncio.create_task(
                    self._delayed_follow_up(user_id, rule['message'],
                                            language, delay)
                )
                self.follow_up_tasks[user_id] = task

                logger.info(f"Follow-up scheduled for {user_id}: "
                            f"{follow_up_type} in {delay}h")
        except Exception as e:
            logger.error(f"Error scheduling follow-up: {e}")

    async def _delayed_follow_up(self, user_id: int, message_template: Dict[str, str],
                                 language: str, delay_hours: int):
        """Th·ª±c hi·ªán follow-up sau delay"""
        await asyncio.sleep(delay_hours * 3600)  # Convert hours to seconds

        try:
            message = message_template.get(language, message_template['vi'])
            await self.bot.send_message(chat_id=user_id, text=message)
            logger.info(f"Follow-up sent to {user_id}")
        except Exception as e:
            logger.error(f"Error sending follow-up: {e}")

    async def send_marketing_campaign(self, user_ids: List[int], campaign_type: str,
                                     data: Dict[str, Any], language: str = 'vi'):
        """G·ª≠i marketing campaign"""
        try:
            if campaign_type in self.marketing_templates:
                template = self.marketing_templates[campaign_type]
                message = template.get(language, template['vi']).format(**data)

                success_count = 0
                for user_id in user_ids:
                    try:
                        await self.bot.send_message(chat_id=user_id, text=message)
                        success_count += 1
                        await asyncio.sleep(0.1)  # Rate limiting
                    except Exception as e:
                        logger.error(f"Error sending marketing to {user_id}: {e}")

                logger.info(f"Marketing campaign sent: {success_count}/"
                             f"{len(user_ids)} success")
                return success_count
        except Exception as e:
            logger.error(f"Error in marketing campaign: {e}")
            return 0

    async def check_and_alert(self, customer_data: Dict[str, Any],
                              language: str = 'vi'):
        """Ki·ªÉm tra v√† g·ª≠i alert cho admin"""
        try:
            for rule_name, rule in self.alert_rules.items():
                if rule['condition'](customer_data):
                    message = rule['message'].get(language,
                                                 rule['message']['vi'])
                    formatted_message = message.format(**customer_data)

                    # G·ª≠i alert cho t·∫•t c·∫£ admin
                    for admin_id in bot_config.ADMIN_USER_IDS:
                        try:
                            await self.bot.send_message(
                                chat_id=admin_id,
                                text=f"üö® ALERT: {formatted_message}"
                            )
                        except Exception as e:
                            logger.error(f"Error sending alert to admin "
                                         f"{admin_id}: {e}")

                    logger.info(f"Alert sent for {rule_name}: "
                               f"{customer_data.get('name', 'Unknown')}")
        except Exception as e:
            logger.error(f"Error checking alerts: {e}")

    async def send_bulk_notification(self, user_ids: List[int], message: str,
                                    language: str = 'vi'):
        """G·ª≠i th√¥ng b√°o h√†ng lo·∫°t"""
        try:
            success_count = 0
            for user_id in user_ids:
                try:
                    await self.bot.send_message(chat_id=user_id, text=message)
                    success_count += 1
                    await asyncio.sleep(0.1)  # Rate limiting
                except Exception as e:
                    logger.error(f"Error sending notification to {user_id}: {e}")

            logger.info(f"Bulk notification sent: {success_count}/"
                        f"{len(user_ids)} success")
            return success_count
        except Exception as e:
            logger.error(f"Error in bulk notification: {e}")
            return 0


class NotificationScheduler:
    """L√™n l·ªãch c√°c notification t·ª± ƒë·ªông"""

    def __init__(self, notification_manager: NotificationManager):
        self.notification_manager = notification_manager
        self.scheduled_tasks = {}

    async def schedule_daily_digest(self, admin_ids: List[int]):
        """L√™n l·ªãch b√°o c√°o h√†ng ng√†y"""
        while True:
            try:
                # Ch·ªù ƒë·∫øn 9:00 s√°ng
                now = datetime.now()
                next_run = now.replace(hour=9, minute=0, second=0,
                                     microsecond=0)
                if now >= next_run:
                    next_run += timedelta(days=1)

                wait_seconds = (next_run - now).total_seconds()
                await asyncio.sleep(wait_seconds)

                # G·ª≠i b√°o c√°o h√†ng ng√†y
                await self._send_daily_digest(admin_ids)

            except Exception as e:
                logger.error(f"Error in daily digest: {e}")
                await asyncio.sleep(3600)  # Wait 1 hour if error

    async def _send_daily_digest(self, admin_ids: List[int]):
        """G·ª≠i b√°o c√°o h√†ng ng√†y"""
        try:
            # TODO: L·∫•y d·ªØ li·ªáu t·ª´ database
            message = (
                "üìä B√°o c√°o h√†ng ng√†y\n\n"
                "üìà Th·ªëng k√™ h√¥m nay:\n"
                "‚Ä¢ Kh√°ch h√†ng m·ªõi: 0\n"
                "‚Ä¢ Tin nh·∫Øn h·ªó tr·ª£: 0\n"
                "‚Ä¢ T∆∞∆°ng t√°c AI: 0\n"
                "‚Ä¢ Chuy·ªÉn ƒë·ªïi: 0%\n\n"
                "üéØ C·∫ßn ch√∫ √Ω:\n"
                "‚Ä¢ Kh√¥ng c√≥ ho·∫°t ƒë·ªông n√†o"
            )

            for admin_id in admin_ids:
                try:
                    await self.notification_manager.bot.send_message(
                        chat_id=admin_id, text=message
                    )
                except Exception as e:
                    logger.error(f"Error sending digest to admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Error generating daily digest: {e}")


# Global instance
notification_manager = None
notification_scheduler = None


def init_notification_system(bot: Bot):
    """Kh·ªüi t·∫°o h·ªá th·ªëng notification"""
    global notification_manager, notification_scheduler

    notification_manager = NotificationManager(bot)
    notification_scheduler = NotificationScheduler(notification_manager)

    # B·∫Øt ƒë·∫ßu scheduler v·ªõi x·ª≠ l√Ω l·ªói
    try:
        task = asyncio.create_task(
            notification_scheduler.schedule_daily_digest(bot_config.ADMIN_USER_IDS)
        )
        # L∆∞u task ƒë·ªÉ c√≥ th·ªÉ d·ª´ng sau n√†y
        notification_scheduler.daily_digest_task = task
    except Exception as e:
        logger.error(f"Error starting notification scheduler: {e}")

    logger.info("Notification system initialized")


def get_notification_manager() -> NotificationManager:
    """L·∫•y instance notification manager"""
    return notification_manager
