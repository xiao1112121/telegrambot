#!/usr/bin/env python3
"""
Bulk Messaging System - H·ªá th·ªëng g·ª≠i tin nh·∫Øn h√†ng lo·∫°t
H·ªó tr·ª£ g·ª≠i text, h√¨nh ·∫£nh, video, file k√®m caption
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import List, Dict, Optional
from telegram import Bot
from telegram.constants import ParseMode
from google_sheets import GoogleSheetsManager

logger = logging.getLogger(__name__)


class BulkMessagingManager:
    def __init__(self, bot: Bot, sheets_manager: GoogleSheetsManager):
        self.bot = bot
        self.sheets_manager = sheets_manager
        self.message_queue = []
        self.sending_in_progress = False
        self.stop_sending = False  # Th√™m flag ƒë·ªÉ d·ª´ng g·ª≠i tin nh·∫Øn

    def stop_bulk_messaging(self):
        """D·ª´ng g·ª≠i tin nh·∫Øn h√†ng lo·∫°t"""
        self.stop_sending = True
        logger.info("üõë Y√™u c·∫ßu d·ª´ng g·ª≠i tin nh·∫Øn h√†ng lo·∫°t")

    def reset_stop_flag(self):
        """Reset flag d·ª´ng g·ª≠i tin nh·∫Øn"""
        self.stop_sending = False
        logger.info("üîÑ Reset flag d·ª´ng g·ª≠i tin nh·∫Øn")

    async def send_bulk_message(
        self,
        message_content: str,
        filter_type: Optional[str] = None,
        filter_value: Optional[str] = None,
        media_file: Optional[str] = None,
        media_type: Optional[str] = None,
        delay_between_messages: float = 1.0,
        max_messages_per_minute: int = 30
    ) -> Dict[str, any]:
        """
        G·ª≠i tin nh·∫Øn h√†ng lo·∫°t ƒë·∫øn kh√°ch h√†ng
        Args:
            message_content: N·ªôi dung tin nh·∫Øn (text ho·∫∑c caption)
            filter_type: Lo·∫°i b·ªô l·ªçc ('action', 'date', 'username')
            filter_value: Gi√° tr·ªã b·ªô l·ªçc
            media_file: ƒê∆∞·ªùng d·∫´n file media (h√¨nh ·∫£nh, video, file)
            media_type: Lo·∫°i media ('photo', 'video', 'document', 'audio')
            delay_between_messages: ƒê·ªô tr·ªÖ gi·ªØa c√°c tin nh·∫Øn (gi√¢y)
            max_messages_per_minute: S·ªë tin nh·∫Øn t·ªëi ƒëa m·ªói ph√∫t

        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ g·ª≠i tin nh·∫Øn
        """
        try:
            # L·∫•y danh s√°ch kh√°ch h√†ng
            if filter_type and filter_value:
                customers = self.sheets_manager.get_customers_by_filter(filter_type, filter_value)
            else:
                customers = self.sheets_manager.get_all_customers()

            if not customers:
                return {
                    'success': False,
                    'message': 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o',
                    'total_customers': 0,
                    'sent_count': 0,
                    'failed_count': 0
                }

            logger.info(f"B·∫Øt ƒë·∫ßu g·ª≠i tin nh·∫Øn h√†ng lo·∫°t ƒë·∫øn {len(customers)} kh√°ch h√†ng")

            # G·ª≠i tin nh·∫Øn v·ªõi rate limiting
            results = await self._send_messages_with_rate_limit(
                customers, message_content, media_file, media_type, delay_between_messages, max_messages_per_minute
            )

            # Ghi log k·∫øt qu·∫£
            self._log_bulk_message_results(message_content, results, media_file, media_type)

            return {
                'success': True,
                'message': 'ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng',
                'total_customers': len(customers),
                'sent_count': results['sent_count'],
                'failed_count': results['failed_count'],
                'media_sent': bool(media_file),
                'media_type': media_type,
                'results': results
            }

        except Exception as e:
            logger.error(f"L·ªói g·ª≠i tin nh·∫Øn h√†ng lo·∫°t: {e}")
            return {
                'success': False,
                'message': f'L·ªói: {str(e)}',
                'total_customers': 0,
                'sent_count': 0,
                'failed_count': 0
            }

    async def _send_messages_with_rate_limit(
        self,
        customers: List[Dict],
        message_content: str,
        media_file: Optional[str],
        media_type: Optional[str],
        delay_between_messages: float,
        max_messages_per_minute: int
    ) -> Dict[str, any]:
        """G·ª≠i tin nh·∫Øn v·ªõi rate limiting ƒë·ªÉ tr√°nh b·ªã ch·∫∑n"""

        sent_count = 0
        failed_count = 0
        failed_users = []

        # T√≠nh to√°n delay ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
        actual_delay = max(delay_between_messages, 60.0 / max_messages_per_minute)

        # Lo·∫°i b·ªè tr√πng l·∫∑p user_id - ch·ªâ gi·ªØ l·∫°i user_id ƒë·∫ßu ti√™n
        unique_customers = []
        seen_user_ids = set()

        for customer in customers:
            user_id = customer.get('user_id')
            if user_id and user_id not in seen_user_ids:
                unique_customers.append(customer)
                seen_user_ids.add(user_id)
            elif user_id:
                logger.info(f"B·ªè qua user_id tr√πng l·∫∑p: {user_id}")

        logger.info(f"T·ªïng kh√°ch h√†ng: {len(customers)}, Sau khi lo·∫°i b·ªè tr√πng l·∫∑p: {len(unique_customers)}")

        # Gi·ªõi h·∫°n s·ªë tin nh·∫Øn g·ª≠i m·ªói l·∫ßn ƒë·ªÉ tr√°nh spam
        max_messages_per_batch = 20
        customers_to_process = unique_customers[:max_messages_per_batch]

        logger.info(f"G·ª≠i tin nh·∫Øn ƒë·∫øn {len(customers_to_process)} kh√°ch h√†ng ƒë·∫ßu ti√™n (gi·ªõi h·∫°n {max_messages_per_batch})")

        for i, customer in enumerate(customers_to_process):
            # Ki·ªÉm tra xem c√≥ y√™u c·∫ßu d·ª´ng kh√¥ng
            if self.stop_sending:
                logger.info("üõë D·ª´ng g·ª≠i tin nh·∫Øn theo y√™u c·∫ßu")
                break

            try:
                user_id = customer.get('user_id')
                if not user_id:
                    failed_count += 1
                    failed_users.append({
                        'user_id': 'Unknown',
                        'username': customer.get('username', 'Unknown'),
                        'error': 'Kh√¥ng c√≥ User ID'
                    })
                    continue

                # Ki·ªÉm tra xem user c√≥ ph·∫£i admin kh√¥ng (b·ªè qua admin)
                if str(user_id) in ['6513278007', '7363247246', '7988655018']:
                    logger.info(f"B·ªè qua admin user {user_id}")
                    continue

                # Ki·ªÉm tra v√† lo·∫°i b·ªè bot kh√°c
                username = customer.get('username', '').lower()
                full_name = customer.get('full_name', '').lower()

                # Danh s√°ch t·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán bot
                bot_keywords = [
                    'bot', 'anonymous', 'group', 'channel', 'telegram',
                    'system', 'service', 'helper', 'assistant'
                ]

                # Ki·ªÉm tra username v√† full_name c√≥ ch·ª©a t·ª´ kh√≥a bot kh√¥ng
                is_bot = any(keyword in username or keyword in full_name for keyword in bot_keywords)

                if is_bot:
                    logger.info(f"B·ªè qua bot: {username} ({full_name})")
                    continue

                # G·ª≠i tin nh·∫Øn
                success = await self._send_single_message(
                    user_id, message_content, customer, media_file, media_type
                )

                if success:
                    sent_count += 1
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong Google Sheets
                    self.sheets_manager.update_customer_message_status(user_id, True)
                    logger.info(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn user {user_id}")
                else:
                    failed_count += 1
                    failed_users.append({
                        'user_id': user_id,
                        'username': customer.get('username', 'Unknown'),
                        'error': 'G·ª≠i tin nh·∫Øn th·∫•t b·∫°i'
                    })

                # Delay gi·ªØa c√°c tin nh·∫Øn (tƒÉng delay ƒë·ªÉ tr√°nh spam)
                if i < len(customers_to_process) - 1:
                    await asyncio.sleep(actual_delay * 2)  # TƒÉng delay g·∫•p ƒë√¥i

                # Log ti·∫øn ƒë·ªô
                if (i + 1) % 5 == 0:  # Log m·ªói 5 tin nh·∫Øn thay v√¨ 10
                    logger.info(f"Ti·∫øn ƒë·ªô: {i + 1}/{len(customers_to_process)} tin nh·∫Øn ƒë√£ g·ª≠i")

            except Exception as e:
                failed_count += 1
                failed_users.append({
                    'user_id': customer.get('user_id', 'Unknown'),
                    'username': customer.get('username', 'Unknown'),
                    'error': str(e)
                })
                logger.error(f"L·ªói g·ª≠i tin nh·∫Øn ƒë·∫øn user {customer.get('user_id')}: {e}")

        # Reset flag d·ª´ng sau khi ho√†n th√†nh
        self.stop_sending = False

        # Th√¥ng b√°o k·∫øt th√∫c
        if len(unique_customers) > max_messages_per_batch:
            logger.info(f"‚ö†Ô∏è Ch·ªâ g·ª≠i {max_messages_per_batch}/{len(unique_customers)} kh√°ch h√†ng ƒë·ªÉ tr√°nh spam. Ch·∫°y l·∫°i ƒë·ªÉ g·ª≠i ti·∫øp.")

        logger.info(f"‚úÖ Ho√†n th√†nh g·ª≠i tin nh·∫Øn: {sent_count} th√†nh c√¥ng, {failed_count} th·∫•t b·∫°i")

        return {
            'sent_count': sent_count,
            'failed_count': failed_count,
            'failed_users': failed_users,
            'total_processed': len(customers_to_process),
            'total_customers': len(unique_customers),
            'original_total': len(customers),
            'duplicates_removed': len(customers) - len(unique_customers),
            'batch_limit': max_messages_per_batch
        }

    async def _send_single_message(
        self,
        user_id: str,
        message_content: str,
        customer_info: Dict,
        media_file: Optional[str] = None,
        media_type: Optional[str] = None
    ) -> bool:
        """G·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn m·ªôt kh√°ch h√†ng c·ª• th·ªÉ"""
        try:
            # T√πy ch·ªânh tin nh·∫Øn v·ªõi th√¥ng tin kh√°ch h√†ng
            personalized_message = self._personalize_message(message_content, customer_info)

            # G·ª≠i tin nh·∫Øn v·ªõi media ho·∫∑c ch·ªâ text
            if media_file and media_type and os.path.exists(media_file):
                await self._send_media_message(user_id, personalized_message, media_file, media_type)
            else:
                # G·ª≠i ch·ªâ text
                await self.bot.send_message(
                    chat_id=int(user_id),
                    text=personalized_message,
                    parse_mode=ParseMode.HTML
                )

            # Ghi log tin nh·∫Øn ƒë√£ g·ª≠i
            self.sheets_manager.add_message_log(
                user_id, message_content, 'bulk_message', 'sent'
            )

            return True

        except Exception as e:
            logger.error(f"L·ªói g·ª≠i tin nh·∫Øn ƒë·∫øn user {user_id}: {e}")

            # Ghi log l·ªói
            self.sheets_manager.add_message_log(
                user_id, message_content, 'bulk_message', 'failed'
            )

            return False

    async def _send_media_message(
        self,
        user_id: str,
        caption: str,
        media_file: str,
        media_type: str
    ):
        """G·ª≠i tin nh·∫Øn media v·ªõi caption"""
        try:
            with open(media_file, 'rb') as file:
                if media_type == 'photo':
                    await self.bot.send_photo(
                        chat_id=int(user_id),
                        photo=file,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                elif media_type == 'video':
                    await self.bot.send_video(
                        chat_id=int(user_id),
                        video=file,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                elif media_type == 'document':
                    await self.bot.send_document(
                        chat_id=int(user_id),
                        document=file,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                elif media_type == 'audio':
                    await self.bot.send_audio(
                        chat_id=int(user_id),
                        audio=file,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                else:
                    # Fallback: g·ª≠i document
                    await self.bot.send_document(
                        chat_id=int(user_id),
                        document=file,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )

        except Exception as e:
            logger.error(f"L·ªói g·ª≠i media ƒë·∫øn user {user_id}: {e}")
            # Fallback: g·ª≠i ch·ªâ text n·∫øu media th·∫•t b·∫°i
            await self.bot.send_message(
                chat_id=int(user_id),
                text=caption,
                parse_mode=ParseMode.HTML
            )

    def _personalize_message(self, message_content: str, customer_info: Dict) -> str:
        """T√πy ch·ªânh tin nh·∫Øn v·ªõi th√¥ng tin kh√°ch h√†ng"""
        try:
            personalized = message_content

            # Thay th·∫ø c√°c placeholder
            replacements = {
                '{username}': customer_info.get('username', ''),
                '{full_name}': customer_info.get('full_name', ''),
                '{action}': customer_info.get('action', ''),
                '{date}': customer_info.get('time', '').split()[0] if customer_info.get('time') else ''
            }

            for placeholder, value in replacements.items():
                personalized = personalized.replace(placeholder, str(value))

            return personalized

        except Exception as e:
            logger.error(f"L·ªói t√πy ch·ªânh tin nh·∫Øn: {e}")
            return message_content

    def _log_bulk_message_results(
        self,
        message_content: str,
        results: Dict,
        media_file: Optional[str] = None,
        media_type: Optional[str] = None
    ):
        """Ghi log k·∫øt qu·∫£ g·ª≠i tin nh·∫Øn h√†ng lo·∫°t"""
        try:
            # Th√¥ng tin c∆° b·∫£n
            log_data = {
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'message_content': message_content[:100] + "..." if len(message_content) > 100 else message_content,
                'total_customers': results['total_customers'],
                'sent_count': results['sent_count'],
                'failed_count': results['failed_count'],
                'media_file': media_file or 'None',
                'media_type': media_type or 'text_only',
                'success_rate': f"{(results['sent_count'] / results['total_customers'] * 100):.1f}%" if results['total_customers'] > 0 else "0%"
            }

            # Th√™m th√¥ng tin v·ªÅ tr√πng l·∫∑p n·∫øu c√≥
            if 'original_total' in results and 'duplicates_removed' in results:
                log_data['original_total'] = results['original_total']
                log_data['duplicates_removed'] = results['duplicates_removed']
                log_data['duplicate_info'] = f"Lo·∫°i b·ªè {results['duplicates_removed']} user_id tr√πng l·∫∑p"

            logger.info(f"üìä K·∫øt qu·∫£ g·ª≠i tin nh·∫Øn h√†ng lo·∫°t: {log_data}")

            # Log chi ti·∫øt v·ªÅ tr√πng l·∫∑p
            if 'duplicates_removed' in results and results['duplicates_removed'] > 0:
                logger.info(f"üîÑ ƒê√£ lo·∫°i b·ªè {results['duplicates_removed']} user_id tr√πng l·∫∑p t·ª´ {results['original_total']} kh√°ch h√†ng g·ªëc")

        except Exception as e:
            logger.error(f"L·ªói ghi log k·∫øt qu·∫£: {e}")

    async def schedule_bulk_message(
        self,
        message_content: str,
        schedule_time: datetime,
        filter_type: Optional[str] = None,
        filter_value: Optional[str] = None,
        media_file: Optional[str] = None,
        media_type: Optional[str] = None
    ) -> Dict[str, any]:
        """
        L√™n l·ªãch g·ª≠i tin nh·∫Øn h√†ng lo·∫°t

        Args:
            message_content: N·ªôi dung tin nh·∫Øn
            schedule_time: Th·ªùi gian g·ª≠i
            filter_type: Lo·∫°i b·ªô l·ªçc
            filter_value: Gi√° tr·ªã b·ªô l·ªçc
            media_file: File media
            media_type: Lo·∫°i media

        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ l√™n l·ªãch
        """
        try:
            # T√≠nh th·ªùi gian delay
            now = datetime.now()
            if schedule_time <= now:
                return {
                    'success': False,
                    'message': 'Th·ªùi gian l√™n l·ªãch ph·∫£i l·ªõn h∆°n th·ªùi gian hi·ªán t·∫°i'
                }

            delay_seconds = (schedule_time - now).total_seconds()

            # L√™n l·ªãch g·ª≠i tin nh·∫Øn
            asyncio.create_task(
                self._delayed_bulk_message(
                    delay_seconds, message_content, filter_type, filter_value, media_file, media_type
                )
            )

            return {
                'success': True,
                'message': f'ƒê√£ l√™n l·ªãch g·ª≠i tin nh·∫Øn v√†o {schedule_time.strftime("%Y-%m-%d %H:%M:%S")}',
                'scheduled_time': schedule_time.strftime("%Y-%m-%d %H:%M:%S"),
                'delay_seconds': delay_seconds
            }

        except Exception as e:
            logger.error(f"L·ªói l√™n l·ªãch g·ª≠i tin nh·∫Øn: {e}")
            return {
                'success': False,
                'message': f'L·ªói: {str(e)}'
            }

    async def _delayed_bulk_message(
        self,
        delay_seconds: float,
        message_content: str,
        filter_type: Optional[str],
        filter_value: Optional[str],
        media_file: Optional[str],
        media_type: Optional[str]
    ):
        """G·ª≠i tin nh·∫Øn sau khi delay"""
        try:
            await asyncio.sleep(delay_seconds)
            await self.send_bulk_message(
                message_content, filter_type, filter_value, media_file, media_type
            )
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i tin nh·∫Øn ƒë√£ l√™n l·ªãch: {e}")

    def get_supported_media_types(self) -> List[str]:
        """L·∫•y danh s√°ch lo·∫°i media ƒë∆∞·ª£c h·ªó tr·ª£"""
        return ['photo', 'video', 'document', 'audio']

    def validate_media_file(self, file_path: str, media_type: str) -> Dict[str, any]:
        """
        Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file media

        Args:
            file_path: ƒê∆∞·ªùng d·∫´n file
            media_type: Lo·∫°i media

        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ ki·ªÉm tra
        """
        try:
            if not os.path.exists(file_path):
                return {
                    'valid': False,
                    'message': 'Arquivo n√£o existe',
                    'file_size': 0
                }

            file_size = os.path.getsize(file_path)

            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file theo lo·∫°i
            max_sizes = {
                'photo': 10 * 1024 * 1024,  # 10MB
                'video': 50 * 1024 * 1024,  # 50MB
                'document': 2000 * 1024 * 1024,  # 2GB
                'audio': 50 * 1024 * 1024  # 50MB
            }

            max_size = max_sizes.get(media_type, 50 * 1024 * 1024)

            if file_size > max_size:
                return {
                    'valid': False,
                    'message': f'Arquivo muito grande. M√°ximo: {max_size // (1024 * 1024)}MB',
                    'file_size': file_size
                }

            return {
                'valid': True,
                'message': 'Arquivo v√°lido',
                'file_size': file_size
            }

        except Exception as e:
            return {
                'valid': False,
                'message': f'Erro ao verificar arquivo: {str(e)}',
                'file_size': 0
            }


# H√†m helper ƒë·ªÉ s·ª≠ d·ª•ng d·ªÖ d√†ng
async def send_bulk_message_to_customers(
    message_content: str,
    filter_type: Optional[str] = None,
    filter_value: Optional[str] = None,
    media_file: Optional[str] = None,
    media_type: Optional[str] = None
) -> Dict[str, any]:
    """G·ª≠i tin nh·∫Øn h√†ng lo·∫°t ƒë·∫øn kh√°ch h√†ng"""
    from bot_config import TELEGRAM_TOKEN
    bot = Bot(token=TELEGRAM_TOKEN)
    sheets_manager = GoogleSheetsManager()
    manager = BulkMessagingManager(bot, sheets_manager)
    return await manager.send_bulk_message(
        message_content, filter_type, filter_value, media_file, media_type
    )


async def schedule_bulk_message_for_customers(
    message_content: str,
    schedule_time: datetime,
    filter_type: Optional[str] = None,
    filter_value: Optional[str] = None,
    media_file: Optional[str] = None,
    media_type: Optional[str] = None
) -> Dict[str, any]:
    """L√™n l·ªãch g·ª≠i tin nh·∫Øn h√†ng lo·∫°t"""
    from bot_config import TELEGRAM_TOKEN
    bot = Bot(token=TELEGRAM_TOKEN)
    sheets_manager = GoogleSheetsManager()
    manager = BulkMessagingManager(bot, sheets_manager)
    return await manager.schedule_bulk_message(
        message_content, schedule_time, filter_type, filter_value, media_file, media_type
    )
